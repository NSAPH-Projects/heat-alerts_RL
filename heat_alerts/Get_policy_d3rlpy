
from argparse import ArgumentParser
import numpy as np
import random
import pandas as pd

import torch
import torch.nn as nn
import d3rlpy
from d3rlpy.models.encoders import VectorEncoderFactory
from d3rlpy.algos import DQN, DoubleDQN

# from heat_alerts.Setup_d3rlpy import make_data
from Setup_d3rlpy import make_data
# from heat_alerts.cpq import CPQ
from cpq import CPQ

def set_seed(seed):
    np.random.seed(seed) 
    random.seed(seed)
    torch.backends.cudnn.deterministic = True
    torch.manual_seed(seed)
    torch.cuda.manual_seed_all(seed)

def main(params):

    d3rlpy.seed(321)
    params = vars(params)

    data = make_data(
        outcome = params["outcome"], modeled_r = params["modeled_r"], 
        log_r = True, random_effects = params["random_effects"], eligible = params["eligible"],
        pca = params["pca"], pca_var_thresh = params["pca_var_thresh"], manual_S_size = params["S_size"]
    )
    dataset = data[0]
    s_means = data[1]
    s_stds = data[2]
    Index = data[3] # index of episode (county-summer)

    ## Set up NN:

    n_hidden = params["n_hidden"]
    encoder_factory = VectorEncoderFactory(hidden_units=[n_hidden]*3, activation='relu') # doesn't allow for 'elu'

    gpu = False
    if params["n_gpus"] > 0: gpu = True

    functions = [DQN, DoubleDQN, CPQ]
    func_names = ["DQN", "DoubleDQN", "CPQ"]
    algos = dict(zip(func_names, functions))
    algo = algos[params["algo"]] # DQN, DoubleDQN, CPQ

    dqn = algo(
        encoder_factory=encoder_factory,
        use_gpu=gpu, 
        batch_size=params["b_size"],
        learning_rate=params["lr"],
        gamma=params["gamma"],
        target_update_interval=params["b_size"]*params["sync_rate"]
        ) 
    
    dqn.build_with_dataset(dataset) 
    dqn.load_model(params["final_model"])

    